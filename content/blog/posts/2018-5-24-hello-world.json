{
  "title": "WeApp workflow with Gulp",
  "date": "2018-05-26T21:57:45+08:00",
  "originalPostLink": "https://devework.com/weapp-workflow.html",
  "thumbnail": "/images/uploads/gulpwechat.png",
  "body": "![null](/images/uploads/weapp-worfkflow-banner2-2x.jpg)\n\n## Intro\n\n_WeApp-Workflow_ is a workflow that utilizes frontend build tools used for building WeChat mini Programs. Based on Gulp 4, this workflow uses a build system to resolve some of the pain points faced by developers when writing Mini Programs.\n\nRepo：https://github.com/Jeff2Ma/WeApp-Workflow\n\nArticle (Chinese)：https://devework.com/weapp-workflow.html\n\n## Features\n\n### Transpile SCSS to WXSS\n\nUtilize the Sass pre-processor to make writing CSS a smoother experience. Files with the `.scss` extension will automatically be watched and transpiled to the appropriate `.wxss` format for your MP.\n\n### Convert PX to RPX units\n\nPX units in CSS get transpiled to RPX, referencing the size of iPhone 6 PX as a standard, as per Tencent's official documentation.\n\n```css\n// Input: src/pages/index/index.scss\n.index__header {\n\tfont-size: 14px;\n\tmargin-top: 20PX; /* If you write PX in all caps, it won't get converted*/\n}\n\n// Output: dist/pages/index/index.wxss\n.index__header {\n\tfont-size: 28rpx; /* converted 14px -> 28rpx*/\n\tmargin-top: 20PX; /* PX all caps, not converted */\n}\n```\n\n### Image compression\n\nThe build system automatically compresses images to save space in your mini program.\n\n### Automatically upload images to CDN, replace with HTTPS URL\n\nWeChat Mini Programs don't support relative paths for image imports, only absolute paths beginning with https protocol are supported. This feature of the workflow can take relative image paths from your WXML and WXSS files, upload them to your CDN or FTP/STP onto your server, and replace the file in your code. Currently only supports **Tencent Cloud** and **QiNiu**.\n\n```html\n// Input: src/pages/index/index.wxml\n<image src=\"%ASSETS_IMG%/t.png\"></image>\n\n// Output: dist/pages/index/index.wxml\n<image src=\"https://cdn.devework.com/weapp/devework/t.png\"></image>\n```\n\n### Convert font files to base64\n\nMini programs don't support relative paths for font files, so this build system takes font faces used in your CSS, converts it to base64, and replaces the path in your CSS.\n\n```html\n// Input: src/pages/index/index.scss\n@font-face {\n  font-family: 'fontello';\n  src: url(\"assets/fonts/fontello.ttf\") format('truetype');\n}\n\n// Output: dist/pages/index/index.wxss\n@font-face {\n  font-family: 'fontello';\n  src: url(data:application/font-sfnt;charset=utf-8;base64,AAEAAAAPAIAA....FsASNsQIARAAA) format(\"truetype\");\n}\n```\n\n### Fully automatic conversion generation of sprites for Postcss\n\nThis feature comes from postcss-lazysprite. During development, after preparing an image you only have to write `@lazysprite\"xxxx\"` in your code, and the build system will create the sprite and corresponding CSS for you.\n\n```css\n// Input: src/app.scss\n@lazysprite \"filetype\";\n\n// Output: dist/app.wxss\n.icon-filetype-doc {\n    background-image: url(../sprites/filetype.png);\n    background-position: 0 0;\n    width: 80px;\n    height: 80px;\n}\n\n.icon-filetype-pdf {\n    background-image: url(../sprites/filetype.png);\n    background-position: -90px 0;\n    width: 80px;\n    height: 80px;\n}\n\n@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio:2) {\n    .icon-filetype-doc {\n        background-image: url(../sprites/filetype@2x.png);\n        background-position: 0 0;\n        background-size: 170px 170px;\n    }\n\n    .icon-filetype-pdf {\n        background-image: url(../sprites/filetype@2x.png);\n        background-position: -90px 0;\n        background-size: 170px 170px;\n    }\n}\n```\n\n## Highlights\n\n### Gulp 4\n\nUses all the features of the newest version of Gulp 4 for faster buold times\n\n### Simple but robust\n\nWith this workflow, there is just one core task to the build, taking care of a ton of busy work for you as the developer, greatly reducing tedium and repetitiveness in your development workflow.\n\n### Incremental builds -> faster builds\n\nSass compiler and image related functions can take serious time off your development workflow.\n\n## Folder structure\n\n```\n.\n├── config.custom.js // your custom gulp config, will overwrite config.js\n├── config.js // gulp config\n├── gulpfile.js\n├── package.json\n├── src // dev folder, source code, where you write your code\n│   ├── app.js\n│   ├── app.json\n│   ├── app.scss\n│   ├── assets // static files, source files of assets\n│   │   ├── fonts //font files\n│   │   ├── images // image files, can be uploaded by build to CDN\n│   │   ├── scss // where you usually put your scss files(variables, mixins, etc.)\n│   │   └── sprites // source folder for image sprits\n│   ├── image // for images that you actually need in the MP (tabbar, etc.)\n│   ├── pages\n│   └── utils\n├── tmp //  the cache of temporary files compiled from src\n└── dist // compiled output from src, the code that actually runs in the IDE and MP\n```\n\n## Getting started\n\n> First, you need Node JS version 4.0 or higher. Because this build has dependencies, it is recommended you have a connection to the internet when running.\n\n### Installation\n\n0、First, install globally Gulp-cli\n\n```\nnpm install gulp-cli -g\n```\n\n1、Download the boilerplate with git clone\n\n```\ngit clone https://github.com/Jeff2Ma/WeApp-Workflow\n```\n\n2、It's recommended that you delete the `.git` file in the directory. Windows users must manually delete.\n\n```\ncd WeApp-Workflow\nrm -rf .git\n```\n\n3、Install dependencies\n\n```\nnpm i\n```\n\n4、Start the development build\nIt's recommended that you copy `config.js` into `config.custom.js` if it doesn't exist already, and then build your custom build settings for your project. After you're ready:\n\n```\ngulp\n```\n\n![null](/images/uploads/iterm.png)\n\nThere's also a clean command：`gulp clean`\nThis will delete the contents of `dist` & `tmp`\n\n### Config\n\nAfter completing the setup steps above, you can open your WeChat IDE and apply the following config (applies to v1.x and up, no longer supporting v0.x): \n\n1、Create a new project, and choose the entire working directory of your project, but make sure there is a `project.config.json` file in your directory pointing to the `dist` folder.\n\n![null](/images/uploads/s1.png)\n\n### Developing\n\nNow you can start writing code as normal! However, it is recommended you use a third part text editor or IDE (such as WebStorm, Sublime, etc.) to write your code in the `src` directory. After running `gulp` in the command line, gulp will be watching your files for changes and put the compiled code into the `dist` folder. The WeChat IDE will automatically refresh when the code in `dist` changes.\n\nTips for development：\n\n* **SCSS**: For example, if you write your scss in `src/pages/page-name/page-name.scss`, the build will automatically put your code as `page-name.wxss` in the `dist` folder, in the same path. `px` units in scss will automatically be converted to `rpx` unless you write the unit in all caps, like `120PX`.\n* **WXML**: Other than **CDN path replace** function, wxml is still the same as normal, no changes.\n* **WebFonts**: First you can use a site such as fontell.com to convert your sprites to a ttf file, upon which you can put the file in `src/assets/fonts`, where it will then get converted to base64 by the build system.\n* **CDN 图片**:（该功能默认关闭，需自行在设置项开启）微信小程序中wxss 或wxml 不支持相对路径的图片，需要https 开头的绝对路径。本工作流可以使得开发时候直接写相对路径，工作流会帮忙上传到CDN 并替换原路径。此类图片必须放置到`src/assets/images`下，然后在wxml 或CSS 中用`%ASSETS_IMG%/filename.png`的方式写路径。`%ASSETS_IMG%`为自定义的目录供后续字符串替换。\n* Image sprites: It's not recommended to use image sprites in mini programs, instead use the image itself or convert to a webfont format. If you must use image sprites, it's recommended to put them insrc/assets/sprites and use the @lazysprite \"xxxx\" syntax in your app.scss. For more info about image sprites [click here](https://github.com/Jeff2Ma/postcss-lazysprite)."
}